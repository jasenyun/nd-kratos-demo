// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: api/helloworld/v1/greeter.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterCreateGreeter = "/helloworld.v1.Greeter/CreateGreeter"
const OperationGreeterFindById = "/helloworld.v1.Greeter/FindById"

type GreeterHTTPServer interface {
	CreateGreeter(context.Context, *CreateRequest) (*CreateReply, error)
	FindById(context.Context, *FindRequest) (*FindReply, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.GET("/greeter/create/{name}", _Greeter_CreateGreeter0_HTTP_Handler(srv))
	r.GET("/greeter/{id}", _Greeter_FindById0_HTTP_Handler(srv))
}

func _Greeter_CreateGreeter0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterCreateGreeter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGreeter(ctx, req.(*CreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_FindById0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterFindById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindById(ctx, req.(*FindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindReply)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	CreateGreeter(ctx context.Context, req *CreateRequest, opts ...http.CallOption) (rsp *CreateReply, err error)
	FindById(ctx context.Context, req *FindRequest, opts ...http.CallOption) (rsp *FindReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) CreateGreeter(ctx context.Context, in *CreateRequest, opts ...http.CallOption) (*CreateReply, error) {
	var out CreateReply
	pattern := "/greeter/create/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterCreateGreeter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) FindById(ctx context.Context, in *FindRequest, opts ...http.CallOption) (*FindReply, error) {
	var out FindReply
	pattern := "/greeter/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterFindById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
